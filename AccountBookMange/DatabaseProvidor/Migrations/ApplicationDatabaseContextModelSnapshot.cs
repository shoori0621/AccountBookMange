// <auto-generated />
using System;
using DatabaseProvidor.Accesses;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DatabaseProvidor.Migrations
{
    [DbContext(typeof(ApplicationDatabaseContext))]
    partial class ApplicationDatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.2");

            modelBuilder.Entity("DatabaseProvidor.Models.Account", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("DeleteFlag")
                        .HasColumnName("delete_flag")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("TEXT");

                    b.Property<long>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("INTEGER");

                    b.Property<long>("id")
                        .HasColumnName("Account_id")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("id");

                    b.ToTable("account");
                });

            modelBuilder.Entity("DatabaseProvidor.Models.CreditCard", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("DeleteFlag")
                        .HasColumnName("delete_flag")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("TEXT");

                    b.Property<long>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("INTEGER");

                    b.Property<long>("id")
                        .HasColumnName("CreditCard_id")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("id");

                    b.ToTable("credit_card");
                });

            modelBuilder.Entity("DatabaseProvidor.Models.Income", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("AccountId")
                        .HasColumnName("account_id")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Comment")
                        .HasColumnName("comment")
                        .HasColumnType("TEXT");

                    b.Property<string>("IncomeDate")
                        .HasColumnName("income_date")
                        .HasColumnType("TEXT");

                    b.Property<long?>("IncomeKind")
                        .HasColumnName("income_kind")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("IncomePrice")
                        .HasColumnName("income_price")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("account_id")
                        .HasColumnName("account_id1")
                        .HasColumnType("INTEGER");

                    b.Property<long>("id")
                        .HasColumnName("Income_id")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("account_id");

                    b.HasIndex("id");

                    b.ToTable("income");
                });

            modelBuilder.Entity("DatabaseProvidor.Models.Move", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Comment")
                        .HasColumnName("comment")
                        .HasColumnType("TEXT");

                    b.Property<string>("EndDate")
                        .HasColumnName("end_date")
                        .HasColumnType("TEXT");

                    b.Property<long?>("MovePrice")
                        .HasColumnName("move_price")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("NextAccountId")
                        .HasColumnName("next_account_id")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("PreAccountId")
                        .HasColumnName("pre_account_id")
                        .HasColumnType("INTEGER");

                    b.Property<string>("StartDate")
                        .HasColumnName("start_date")
                        .HasColumnType("TEXT");

                    b.Property<long?>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("INTEGER");

                    b.Property<long>("id")
                        .HasColumnName("Move_id")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("next_account_id")
                        .HasColumnName("next_account_id1")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("pre_account_id")
                        .HasColumnName("pre_account_id1")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("id");

                    b.HasIndex("next_account_id");

                    b.HasIndex("pre_account_id");

                    b.ToTable("move");
                });

            modelBuilder.Entity("DatabaseProvidor.Models.Payment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("AccountId")
                        .HasColumnName("account_id")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("CardId")
                        .HasColumnName("card_id")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Comment")
                        .HasColumnName("comment")
                        .HasColumnType("TEXT");

                    b.Property<string>("PaymentDate")
                        .HasColumnName("payment_date")
                        .HasColumnType("TEXT");

                    b.Property<long?>("PaymentKind")
                        .HasColumnName("payment_kind")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("PaymentPrice")
                        .HasColumnName("payment_price")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("PaymentWay")
                        .HasColumnName("payment_way")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("account_id")
                        .HasColumnName("account_id1")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("card_id")
                        .HasColumnName("card_id1")
                        .HasColumnType("INTEGER");

                    b.Property<long>("id")
                        .HasColumnName("Payment_id")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("account_id");

                    b.HasIndex("card_id");

                    b.HasIndex("id");

                    b.ToTable("payment");
                });

            modelBuilder.Entity("DatabaseProvidor.Models.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Account")
                        .HasColumnName("account")
                        .HasColumnType("TEXT");

                    b.Property<long?>("DeleteFlag")
                        .HasColumnName("delete_flag")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .HasColumnName("password")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("user");
                });

            modelBuilder.Entity("DatabaseProvidor.Models.Account", b =>
                {
                    b.HasOne("DatabaseProvidor.Models.User", null)
                        .WithMany("Accounts")
                        .HasForeignKey("id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DatabaseProvidor.Models.CreditCard", b =>
                {
                    b.HasOne("DatabaseProvidor.Models.User", null)
                        .WithMany("CreditCards")
                        .HasForeignKey("id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DatabaseProvidor.Models.Income", b =>
                {
                    b.HasOne("DatabaseProvidor.Models.Account", "Account")
                        .WithMany()
                        .HasForeignKey("account_id");

                    b.HasOne("DatabaseProvidor.Models.User", null)
                        .WithMany("Incomes")
                        .HasForeignKey("id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DatabaseProvidor.Models.Move", b =>
                {
                    b.HasOne("DatabaseProvidor.Models.User", null)
                        .WithMany("Moves")
                        .HasForeignKey("id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DatabaseProvidor.Models.Account", "NextAccount")
                        .WithMany()
                        .HasForeignKey("next_account_id");

                    b.HasOne("DatabaseProvidor.Models.Account", "PreAccount")
                        .WithMany()
                        .HasForeignKey("pre_account_id");
                });

            modelBuilder.Entity("DatabaseProvidor.Models.Payment", b =>
                {
                    b.HasOne("DatabaseProvidor.Models.Account", "Account")
                        .WithMany()
                        .HasForeignKey("account_id");

                    b.HasOne("DatabaseProvidor.Models.CreditCard", "CreditCard")
                        .WithMany()
                        .HasForeignKey("card_id");

                    b.HasOne("DatabaseProvidor.Models.User", null)
                        .WithMany("Payments")
                        .HasForeignKey("id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
